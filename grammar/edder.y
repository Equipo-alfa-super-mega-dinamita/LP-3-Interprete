RAMMAR EDDER;

START: RESOURCE START
     | GLOBAL START
     | BODY START;
//RESOURCE GLOBAL BODY
RESOURCE : {TK_RESOURCE} {TK_ID} PAREN SOMETHING {TK_END};
GLOBAL: {TK_GLOBAL} GLOBAL_BODY_ID SOMETHING {TK_END} GLOBAL_BODY_END ;
BODY:   {TK_BODY} GLOBAL_BODY_ID SOMETHING {TK_END} GLOBAL_BODY_END ;
G_B_TYPE: {TK_GLOBAL}
        | {TK_BODY};
GLOBAL_BODY_ID: {TK_ID}
              | {TK_FILE};
GLOBAL_BODY_END: {TK_ID}
              | ;
//========================================
//LAS FORMAS QUE UNA SETENCIA PUEDE TENER
SOMETHING: VAR_CONST SOMETHING
   | ASSIGNMENTS SOMETHING
   | Y SOMETHING
   | IMPORT SOMETHING
   | {TK_ID} PAREN SOMETHING
   | {TK_STOP} SOMETHING
   | {TK_SEMICOLON} SOMETHING
   | IF SOMETHING
   | FOR SOMETHING
   | DO SOMETHING
   | {TK_EXIT} SOMETHING
   | OPERATOR SOMETHING
   | PROC SOMETHING
   | OPTYPE SOMETHING
   | TK_TYPE SOMETHING
   | EXTEND SOMETHING
   | IN SOMETHING
   | WRITE SOMETHING
   | 
   ;
//==================================================
//OPTYPE
OPTYPE: {TK_OPTYPE} OPERATOR;
TK_TYPE: {TK_TYPE} {TK_ID} {TK_EQ} {TK_ID} PAREN;
EXTEND: {TK_EXTEND} {TK_ID} NEXT_IMPORT_EX;
EMP_IDENT: IDENT
         | ;
//IN
IN: {TK_IN} {TK_ID} PAREN R_WORD {TK_ARROW} SOMETHING MORE_IN {TK_NI};
R_WORD: {TK_AND} K
      | {TK_BY} IDENT
      | ;
MORE_IN: {TK_SQUARE} IDENT {TK_ARROW} SOMETHING MORE_IN
       | ;

//IMPORT
IMPORT     : {TK_IMPORT} {TK_ID} NEXT_IMPORT_EX;
NEXT_IMPORT_EX: POINT {TK_ID} NEXT_IMPORT_EX
              | COMMA {TK_ID} NEXT_IMPORT_EX
              | ;
//FOR
FOR: {TK_FA} {TK_ID} B {TK_TO} A1 {TK_ARROW} SOMETHING {TK_AF};

//DO
DO: {TK_DO} K {TK_ARROW} SOMETHING {TK_OD};

//OPERATOR
OPERATOR: {TK_ID} N_OPERA NE_OPERA;
N_OPERA: PAREN
       | {TK_COLON} {TK_ID} N_OPERA;
NE_OPERA: {TK_RETURNS} {TK_ID} {TK_COLON} DAT
       | ;

//PROC
PROC: {TK_PROC} {TK_ID} {TK_LPAREN} PAR_FUN {TK_RPAREN} SOMETHING {TK_END};
PAR_FUN:  {TK_ID} N_PAR_FUN
       | ;
N_PAR_FUN: {TK_COMMA} {TK_ID} N_PAR_FUN
         | ;

//OP
TK_OP: {TK_OP} {TK_ID} PRO_NEXT PAREN CALL_SEND;
//WRITE
WRITE: {TK_WRITE} PAREN;
//IF
IF: {TK_IF} K {TK_ARROW} SOMETHING ELSE {TK_FI};
ELSE: {TK_SQUARE} NEXT_ELSE
    | ;
NEXT_ELSE: {TK_ELSE} {TK_ARROW} SOMETHING
         | K {TK_ARROW} SOMETHING NEXT_ELSE;
POINT: {TK_PERIOD};
COMMA: {TK_COMMA};

//====================================================
//DECLARACION DE VARIABLES Y CONSTANTES
VAR_CONST : TYPE {TK_ID} ARRAY ASSIG CON V_C_END;
TYPE : {TK_VAR}
   | {TK_CONST};
//EN CASO QUE SEA UN ARREGLO [A,...,B]
ARRAY : {TK_LBRACKET} ARR_DAT VAL
     | ;
VAL : {TK_COMMA} ARR_DAT VAL
    | {TK_COLON} ARR_DAT {TK_RBRACKET}
    | {TK_RBRACKET};
ARR_DAT : A1
;
//EN CASO QUE SE HAGA UNA ASIGNACION "DOSPUNTOS="


ASSIG : B
     | ;
//EN CASO QUE SE SIGAN DECLARANDO IDENTIFICADORES
CON : {TK_COMMA} {TK_ID} ARRAY ASSIG CON
   | {TK_COLON} {TK_ID} ARRAY ASSIG CON
   | ;
//EL FINAL DE LA DECLARACION
V_C_END : {TK_COLON} DAT SEMICOLON;
DAT : {TK_INT}
    | {TK_BOOL}
    | {TK_REAL}
    | {TK_CHAR}
    | {TK_STRING} ANY_STRING
    | {TK_FILE}
    | {TK_PTR}
    | IDENT;
ANY_STRING : {TK_LBRACKET} {TK_ASTER} {TK_RBRACKET}
       | ;
SEMICOLON : {TK_SEMICOLON}
          | ;

// MANEJO DE LAS ASIGNACIONES ESPECIALES.
ASSIGNMENTS :  {TK_ID} NEXT_ASS AUG;
NEXT_ASS : POINT {TK_ID} NEXT_ASS
         | ;
AUG : A
 | B
 | C
 | E
 | G
 | I;
//======================================================
//ASSIGNMENT OPERATORS
//SWAP
A : {TK_SWAP} IDENT;
// ASSIGN
B  : {TK_ASSIGN} CREATE WHEN B1 CALL_SEND EMP_IDENT ON;
B1 : K;
ON : {TK_ON} {TK_ID}
   | ;
CREATE : {TK_CREATE}
       | ;
WHEN : {TK_WHEN}
     | ;
// INT/REAL
C : {TK_AUG_PLUS} D
  | {TK_AUG_MINUS} D
  | {TK_AUG_EXPON} D
  | {TK_AUG_DIV} D
  | {TK_AUG_ASTER} D;
D : K;

//ASSIGNMENT BOOL OR AND
E : {TK_AUG_OR} F
  | {TK_AUG_AND} F;
F : K;

//ASSIGNMENT CONCAT
G : {TK_AUG_CONCAT} H;
H : K;

//ASSIGNMENT SHIFT
I : {TK_AUG_LSHIFT} J
  | {TK_AUG_RSHIFT} J
  ;
J : K;
//====================================================
//CALL Y SEND
CALL: {TK_CALL} {TK_ID} PRO_NEXT PAREN;
PRO_NEXT: {TK_PERIOD} {TK_ID} PRO_NEXT
             | ;
SEND: {TK_SEND} {TK_ID} PRO_NEXT PAREN;

CALL_OR_SEND: {TK_LBRACE} CALL_SEND {TK_RBRACE}
            | ;
CALL_SEND: {TK_SEND}
         | {TK_CALL}
         | ;
//IDENTIFICADORES DADO QUE PUEDE SER ID1.ID2.ID3.FUN()
IDENT      : {TK_ID} NEXT_IDENT;
NEXT_IDENT : {TK_PERIOD} {TK_ID} NEXT_IDENT
           | PAREN
           | {TK_LBRACKET} {TK_ASTER} {TK_RBRACKET}
           | ;
//SE TOMA QUE SE TIENE UN IDENTIDICADOR O PALABRA RESERVADA Y LO SIGUIENTE SOLO SE ENCARGA DEL PARENTESIS (A,...,B)
//PAREN
PAREN      : {TK_LPAREN} PAREN_POS NEXT_F {TK_RPAREN};
NEXT_F     : {TK_COMMA} PAREN_POS_OB NEXT_F
           | ;
PAREN_POS   : K
           | VAR_CONST
           | {TK_ID} PAREN_N
           | ;
PAREN_POS_OB: K
            | VAR_CONST
            | {TK_ID} PAREN_N;
PAREN_N    : PAREN
           | {TK_COLON} DAT SEMICOLON;
//====================================================
//////////OPERATORS
K : L KP;
KP : {TK_OR} L KP
   | {TK_XOR} L KP
   | ;
L  : O LP;
LP :  {TK_AND} O LP
   | ;

//REAL STR
O  : Q OP;
OP : {TK_LE} Q OP
   | {TK_GE} Q OP
   | {TK_LT} Q OP
   | {TK_GT} Q OP
   | {TK_NE} Q OP
   | {TK_EQ} Q OP
   | ;

//INT
Q  : S QP;
QP : {TK_RSHIFT} S QP
   | {TK_LSHIFT} S QP
   | ;

S  : U SP;
SP : {TK_CONCAT} U SP
   | ;

// INT REAL
U  : V UP;
UP : {TK_MINUS} V UP
   | {TK_PLUS} V UP
   | ;

V  : W VP;
VP :{TK_MOD} W VP
   | {TK_REMDR} W VP
   | {TK_DIV} W VP
   | {TK_ASTER} W VP
   | ;
W  : Y {TK_EXPON} W
   | Y;
 ////////////
Y  : {TK_QMARK} Y
   | {TK_ADDR} Y
   | {TK_DECR} Y
   | {TK_INCR} Y
   | {TK_MINUS} Y
   | {TK_PLUS} Y
   | {TK_NOT} Y
   | Z;
Z  : A1 ZP;
ZP : {TK_HAT} ZP
   | {TK_DECR} ZP
   | {TK_INCR} ZP
   | ;

A1 : IDENT
   | {TK_NUM_INT_OCT}
   | {TK_NUM_INT_DEC}
   | {TK_NUM_INT_HEX}
   | {TK_TRUE}
   | {TK_FALSE}
   | {TK_CADENA}
   | {TK_CARACTER}
   | {TK_NUM_REAL}
   | PAREN;
//======================================== NEW GRAMMAR
GLOBAL: {TK_GLOBAL} IDENT CONST_OR_TYPE {TK_END};
CONST_OR_TYPE: CONSTANT
                              |TYPE;
RESOURCE_SPECIFICATION:
RESOURCE_BODY:
PROC: {TK_PROC}
CONSTANT: {TK_CONST} IDENT {TK_EQ} EXPRESSION;
TYPE: {TK_TYPE} {TK_ID} {TK_EQ} TYPE_SPECIFICATION;
OPTYPE: {TK_OPTYPE} IDENT  {TK_EQ} //PARAMETROS O RETURNS
VARIABLE: {TK_VAR} {TK_ID}  VAR_SUBSCRIP {TK_COLON} DAT
OPERATION:  {TK_OP} IDENT  //SUBSCRIPSTS PARENTS //RETURNS
IDENT: {TK_ID} NEXT_IDENT;
NEXT_IDENT: {TK_PERIOD} {TK_ID} NEXT_IDENT
                        |;

